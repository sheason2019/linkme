// 聊天服务 IDL 定义
struct SequenceItem {
  int ConversationId;
  string Name;
  string LastMessage;
  int LastUpdateTime;
  int UnreadCount;

  optional string Avatar;
}

struct Conversation {
  int Id;
  string Name;

  string Type;

  int MemberCount;
  repeated MessageMember Members;

  optional string Avatar;
}

struct Message {
  int Id;
  string Type;

  string Content;
  int TimeStamp;

  // 发送该消息的会话成员信息
  int MemberId;
  // 已读信息的人数统计
  int TargetCheckedCount;
  int CurrentCheckedCount;
}

struct MessageMember {
  // 成员ID和群昵称
  int MemberId;
  string Nickname;

  // 成员相关的用户信息
  int UserId;
  string Username;

  // 成员所在的会话
  int ConversationId;

  // 成员类型和头像SourceHash
  string Type;
  string AvatarUrl;

  // 成员是否被移出群聊
  boolean Removed;
}

struct MessageResponse {
  repeated Message Messages;
  boolean HasMore;
}

struct GetGroupResponse {
  repeated Conversation Groups;
  boolean HasMore;
}

service Chat {
  // 创建私聊会话，参数是指定的用户ID，返回的是会话ID
  int CreatePrivateConversation(int userId);
  // 创建群组会话，返回会话ID
  int CreateGroupConversation(repeated int userIds, string groupName);
  // 获取会话信息
  Conversation GetConversationById(int convId);
  // 搜索群组信息，目前只能搜索已加入的群组，在群组可见度功能上线后，这里要同步更改成所有可搜索到的群组
  GetGroupResponse GetGroup(string searchText, int offset);
  // 设置群组名称
  void PutGroupName(int groupId, string name);
  // 移除群组中的成员
  void DeleteMembers(repeated int membersId);
  // 移除消息列表中的项
  void DeleteSequenceItem(int convId);
  // 为群组邀请新成员
  void PutMembers(int convId, repeated int usersId);
  // 修改用户在群组中的昵称
  void PutMemberNickname(int convId, string nickName);
}

service ChatRpc {
  // 获取消息列表信息
  repeated SequenceItem GetSequenceItem();
  // 添加消息列表中的项，返回值表示消息列表是否发生改变
  boolean PostSequenceItem(int userId, int convId);
  // 获取用户进入会话的权限
  boolean GetUserEnterConversationLimit(int userId, int convId);
  // 用户发送消息
  Message PostUserMessage(int userId, int convId, Message msg);
  // 拉取会话消息
  MessageResponse GetMessages(int userId, int convId, int originMessageId);
  // 消息已读功能，为了保证上线速度，这里略微偷个懒
  // 在用户进入Conversation的时候，Socet端会向服务端发起一个请求
  // 随后服务端会将用户在指定会话中的已读信息全部置为已读
  // 并且使用全量更新向用户推送经过变化的消息列表信息
  void CheckMessage(int userId, int convId);
}